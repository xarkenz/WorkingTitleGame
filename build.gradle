apply plugin: 'java'

version '1.0-SNAPSHOT'

repositories {
    mavenCentral()
}

sourceCompatibility = 1.16
targetCompatibility = 1.16

dependencies {
    implementation "com.google.code.gson:gson:2.8.9"

    implementation "io.github.spair:imgui-java-app:1.85.1"

    implementation platform("org.lwjgl:lwjgl-bom:3.2.3")
    implementation "org.lwjgl:lwjgl:3.2.3"
    implementation "org.lwjgl:lwjgl-assimp:3.2.3"
    implementation "org.lwjgl:lwjgl-glfw:3.2.3"
    implementation "org.lwjgl:lwjgl-nfd:3.2.3"
    implementation "org.lwjgl:lwjgl-openal:3.2.3"
    implementation "org.lwjgl:lwjgl-opengl:3.2.3"
    implementation "org.lwjgl:lwjgl-stb:3.2.3"
    runtimeOnly "org.lwjgl:lwjgl::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-assimp::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-glfw::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-nfd::natives-linux"
    runtimeOnly "org.lwjgl:lwjgl-openal::natives-linux"
    runtimeOnly 'org.lwjgl:lwjgl-opengl:3.2.3'
    runtimeOnly "org.lwjgl:lwjgl-stb::natives-linux"

    implementation "org.joml:joml:1.10.2"
}

jar {
}

task fatJar(type: Jar) {
    duplicatesStrategy "exclude"
    manifest {
        attributes "Main-Class": "Main"
    }
    archiveClassifier = "all"
    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    with jar
}

artifacts {
    archives fatJar
}

/*plugins {
    id 'java'
}

version '1.0-SNAPSHOT'

sourceCompatibility = 1.16

repositories {
    flatDir {
        dirs "libs"
    }
    mavenCentral()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.2'
}

test {
    useJUnitPlatform()
}

project.ext.gsonVersion = "2.8.7"
project.ext.imguiVersion = "1.83.3"
project.ext.lwjglVersion = "3.2.3"
project.ext.jomlVersion = "1.10.1"

project.ext.lwjglNatives = "natives-linux"

dependencies {
    implementation "com.google.code.gson:gson:$gsonVersion"

    implementation "io.github.spair:imgui-java-app:$imguiVersion"

    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")
    implementation "org.lwjgl:lwjgl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-assimp:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-glfw:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-nfd:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-openal:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-opengl:$lwjglVersion"
    implementation "org.lwjgl:lwjgl-stb:$lwjglVersion"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"

    implementation "org.joml:joml:$jomlVersion"
}

jar {
    manifest {
        attributes (
                'Class-Path': configurations.compileClasspath.collect { it.getName() }.join(' '),
                'Main-Class': 'Main'
        )
    }

    from {
        configurations.compileClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy DuplicatesStrategy.INHERIT
}

task fatJar(type: Jar) {
    manifest.from jar.manifest
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "META-INF/*.SF", "META-INF/*.DSA", "META-INF/*.RSA", "META-INF/*.MF"
    }
    with jar
}

artifacts {
    archives fatJar
}*/